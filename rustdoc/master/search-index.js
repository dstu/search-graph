var N=null,E="",T="t",U="u",searchIndex={};
var R=["result","option","FlatIter","table","symbol","insertion","symbol_map","into_iter","try_from","try_into","borrow_mut","type_id","borrow","typeid","symbol_map::indexing","to_owned","clone_into","from_table","to_table","get_or_insert","get_symbol","size_hint","ordering","partial_cmp","formatter","Insertion","Indexing","SymbolId","TableIntoIter","TableIter","HashIndexing","Returns a traversible list of outgoing edges. Its lifetime…","mutchildlist","Returns a traversible list of incoming edges. Its lifetime…","Returns a traversible list of outgoing edges. `self` is…","mutparentlist","Returns a mutable node handle for the vertex these edges…","mutedge","Adds a child edge to the vertex labeled by `child_label`.…","is_empty","Returns a node handle for the vertex these edges originate…","mutnode","get_edge","get_edge_mut","Adds a parent edge to the vertex labeled by…","Returns an immutable ID that is guaranteed to identify…","get_data","get_data_mut","Returns a mutable node handle for the source of this edge.…","to_edge","search_graph","A traversible list of a vertex's outgoing edges.","A traversible list of a vertex's incoming edges.","get_label","Returns the canonical label that is used to address this…","Returns the data at this vertex.","Returns true iff this vertex has no outgoing edges.","Returns true iff this vertex has no incoming edges.","get_child_list","childlist","get_parent_list","parentlist","Returns true iff there are no outgoing edges.","get_source_node","Returns an edge handle for the `i`th edge.","Returns an iterator over child edges.","childlistiter","Returns the number of edges.","Returns true iff there are no incoming edges.","Returns an iterator over parent edges.","parentlistiter","Returns the data at this edge.","get_source","get_target","search_graph::search","requested_index","search_graph::search::SearchError","searcherror","stackitem","noderef","edgeref","Returns a reference to the data (usually statistics or…","Returns a mutable reference to the data (usually…","child_count","parent_count","find_node","search_graph::mutators","search_graph::nav","search_graph::view","index_mut","MutChildList","MutParentList","ChildList","ParentList","SearchError","Traversal","StackItem","ChildListIter","ParentListIter","StackIter"];
searchIndex["r4"]={"doc":"Provides a macro that generates an iterable sequence via…","i":[[3,R[2],"r4","Flat-maps an Option<I> where I: Iterator into the…",N,N],[11,"new",E,E,0,[[[R[1]]],["self"]]],[14,"iterate",E,"Produces an iterator over values `yield`ed in a sequence…",N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[7],E,E,0,[[],["i"]]],[11,R[8],E,E,0,[[[U]],[R[0]]]],[11,R[9],E,E,0,[[],[R[0]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[13]]]],[11,"next",E,E,0,[[["self"]],[R[1]]]],[11,R[21],E,E,0,[[["self"]]]]],"p":[[3,R[2]]]};
searchIndex["search_graph"]={"doc":"This crate provides support for search (in the sense of AI…","i":[[3,"Graph",R[50],"A directed graph over a space of discrete, enumerated…",N,N],[0,"mutators",E,"Support for navigation of a graph that allows…",N,N],[3,"MutNode",R[86],"Mutable handle to a graph vertex (\"node handle\").",N,N],[3,R[90],E,R[51],N,N],[3,R[91],E,R[52],N,N],[3,"MutEdge",E,"Mutable handle to a graph edge (\"edge handle\").",N,N],[11,"get_id",E,R[45],0,[[["self"]],["usize"]]],[11,R[53],E,R[54],0,[[["self"]],[T]]],[11,R[46],E,R[55],0,[[["self"]],["s"]]],[11,R[47],E,"Returns the data at this vertex, mutably.",0,[[["self"]],["s"]]],[11,"is_leaf",E,R[56],0,[[["self"]],["bool"]]],[11,"is_root",E,R[57],0,[[["self"]],["bool"]]],[11,R[58],E,R[31],0,[[["self"]],[R[59]]]],[11,"get_child_list_mut",E,R[31],0,[[["self"]],[R[32]]]],[11,"to_child_list",E,R[34],0,[[],[R[32]]]],[11,R[60],E,R[33],0,[[["self"]],[R[61]]]],[11,"get_parent_list_mut",E,R[33],0,[[["self"]],[R[35]]]],[11,"to_parent_list",E,R[34],0,[[],[R[35]]]],[11,"to_node",E,"Returns a non-mutating node obtained by converting this…",0,[[],["node"]]],[11,"get_node",E,"Returns a non-mutating node obtained by borrowing this…",0,[[["self"]],["node"]]],[11,"len",E,"Returns the number of outgoing eges.",1,[[["self"]],["usize"]]],[11,R[39],E,R[62],1,[[["self"]],["bool"]]],[11,R[42],E,R[64],1,[[["self"],["usize"]],["edge"]]],[11,R[43],E,"Returns an edge handle for the `i`th edge. Its lifetime…",1,[[["usize"],["self"]],[R[37]]]],[11,R[49],E,"Returns an edge handle for the `i`th `self` is consumed,…",1,[[["usize"]],[R[37]]]],[11,R[63],E,R[40],1,[[["self"]],["node"]]],[11,"get_source_node_mut",E,R[36],1,[[["self"]],[R[41]]]],[11,"to_source_node",E,R[36],1,[[],[R[41]]]],[11,"iter",E,R[65],1,[[["self"]],[R[66]]]],[11,"add_child",E,R[38],1,[[["a"],["self"],["f"],[T]],[R[37]]]],[11,"to_add_child",E,R[38],1,[[["a"],[T],["f"]],[R[37]]]],[11,"len",E,"Returns the number of incoming edges.",2,[[["self"]],["usize"]]],[11,R[39],E,R[68],2,[[["self"]],["bool"]]],[11,"get_target_node",E,R[40],2,[[["self"]],["node"]]],[11,"get_target_node_mut",E,R[36],2,[[["self"]],[R[41]]]],[11,"to_target_node",E,R[36],2,[[],[R[41]]]],[11,R[42],E,"Returns a handle to the `i`th edge. Its lifetime will be…",2,[[["self"],["usize"]],["edge"]]],[11,R[43],E,"Returns a mutable handle to the `i`th edge. Its lifetime…",2,[[["usize"],["self"]],[R[37]]]],[11,R[49],E,"Returns a mutable handle to the `i`th edge. `self` is…",2,[[["usize"]],[R[37]]]],[11,"iter",E,R[69],2,[[["self"]],[R[70]]]],[11,"add_parent",E,R[44],2,[[["a"],["self"],["f"],[T]],[R[37]]]],[11,"to_add_parent",E,R[44],2,[[["a"],[T],["f"]],[R[37]]]],[11,"get_id",E,R[45],3,[[["self"]],["usize"]]],[11,R[46],E,R[71],3,[[["self"]],["a"]]],[11,R[47],E,"Returns the data at this edge, mutably.",3,[[["self"]],["a"]]],[11,R[73],E,"Returns the target of this edge. Returns a node handle,…",3,[[["self"]],["node"]]],[11,"get_target_mut",E,"Returns the target of this edge. Returns a mutable node…",3,[[["self"]],[R[41]]]],[11,"to_target",E,"Returns the target of this edge. Consumes `self` and…",3,[[],[R[41]]]],[11,R[72],E,"Returns a node handle for the source of this edge. Its…",3,[[["self"]],["node"]]],[11,"get_source_mut",E,R[48],3,[[["self"]],[R[41]]]],[11,"to_source",E,R[48],3,[[],[R[41]]]],[11,R[49],E,"Returns a non-mutating edge obtained by converting this…",3,[[],["edge"]]],[0,"nav",R[50],"Support for navigation of a graph without allowing…",N,N],[3,"Node",R[87],"Immutable handle to a graph vertex (\"node handle\").",N,N],[3,R[92],E,R[51],N,N],[3,R[97],E,"Iterator over a vertex's child edges.",N,N],[3,R[93],E,R[52],N,N],[3,R[98],E,"Iterator over a vertex's parent edges.",N,N],[3,"Edge",E,"Immutable handle to a graph edge (\"edge handle\").",N,N],[11,R[53],E,R[54],4,[[["self"]],[T]]],[11,"get_id",E,R[45],4,[[["self"]],["usize"]]],[11,R[46],E,R[55],4,[[["self"]],["s"]]],[11,"is_leaf",E,R[56],4,[[["self"]],["bool"]]],[11,"is_root",E,R[57],4,[[["self"]],["bool"]]],[11,R[58],E,"Returns a traversible list of outgoing edges.",4,[[["self"]],[R[59]]]],[11,R[60],E,"Returns a traversible list of incoming edges.",4,[[["self"]],[R[61]]]],[11,"len",E,R[67],5,[[["self"]],["usize"]]],[11,R[39],E,R[62],5,[[["self"]],["bool"]]],[11,R[63],E,R[40],5,[[["self"]],["node"]]],[11,R[42],E,R[64],5,[[["self"],["usize"]],["edge"]]],[11,"iter",E,R[65],5,[[["self"]],[R[66]]]],[11,"len",E,R[67],6,[[["self"]],["usize"]]],[11,R[39],E,R[68],6,[[["self"]],["bool"]]],[11,"target_node",E,"Returns a node handle for the vertex these edges point to.",6,[[["self"]],["node"]]],[11,R[42],E,R[64],6,[[["self"],["usize"]],["edge"]]],[11,"iter",E,R[69],6,[[["self"]],[R[70]]]],[11,"get_id",E,R[45],7,[[["self"]],["usize"]]],[11,R[46],E,R[71],7,[[["self"]],["a"]]],[11,R[72],E,"Returns a node handle for this edge's source vertex.",7,[[["self"]],["node"]]],[11,R[73],E,"Returns the target of this edge.",7,[[["self"]],["node"]]],[0,"search",R[50],"Data structures and algorithms for local graph search.",N,N],[3,"Stack",R[74],"Tracks the path through a graph that is followed when…",N,N],[3,R[99],E,"Iterates over elements of a search path, in the order in…",N,N],[4,R[94],E,"Errors that may arise during search.",N,N],[13,"ChildBounds",E,"A search operation selected a child index that was out of…",8,N],[12,R[75],R[76],"The index of the child that was requested.",8,N],[12,R[83],E,"The actual number of chidren (which `requested_index`…",8,N],[13,"ParentBounds",R[74],"A search operation selected a parent index that was out of…",8,N],[12,R[75],R[76],"The index of the parent that was requested.",8,N],[12,R[84],E,"The actual number of parents (which `requested_index`…",8,N],[13,"SelectionError",R[74],"A search operation encountered an error.",8,N],[4,R[95],E,"Indicates which edge of a vertex to traverse. Edges are…",N,N],[13,"Child",E,"Traverse the given child.",9,N],[13,"Parent",E,"Traverse the given parent.",9,N],[4,R[96],E,"Sum type for path elements. All elements except the head…",N,N],[13,"Item",E,"Non-head item, a (vertex, edge) pair.",10,N],[13,"Head",E,"The path head, which resolves to a vertex.",10,N],[11,"new",E,"Creates a new `Stack` from a mutable reference into a graph.",11,[[[R[41]]],["self"]]],[11,"len",E,"Returns the number of elements in the path. Since a path…",11,[[["self"]],["usize"]]],[11,"pop",E,"Removes the most recently traversed element from the path,…",11,[[["self"]],[["edge"],[R[1],["edge"]]]]],[11,"head",E,"Returns a read-only view of the head element.",11,[[["self"]],["node"]]],[11,"to_head",E,"Consumes the path and returns a mutable view of its head.",11,[[],[R[41]]]],[11,"push",E,"Grows the path by consulting a function of the current…",11,[[["f"],["self"]],[[R[1],["edge"]],[R[77]],[R[0],[R[1],R[77]]]]]],[11,"iter",E,"Returns an iterator over path elements. Iteration is in…",11,[[["self"]],["stackiter"]]],[11,"item",E,"Returns the `i`th item of the path. Path items are indexed…",11,[[["self"],["usize"]],[[R[78]],[R[1],[R[78]]]]]],[0,"view",R[50],"Provides an editable view of both graph topology and data,…",N,N],[3,"View",R[88],"An editable view of a graph.",N,N],[3,"NodeRef",E,"Reference to a graph vertex that is licensed by a `View`.",N,N],[3,"EdgeRef",E,"Reference to a graph edge that is licensed by a `View`.…",N,N],[5,"of_graph",E,"Applies a function over a view of Graph and returns its…",N,[[["fnonce"],["graph"]],[U]]],[5,"of_node",E,"Applies a function over a MutNode and a view of its…",N,[[["eq"],["hash"],["clone"],["fnonce"],[R[41]]],[U]]],[5,"of_edge",E,"Applies a function over a MutEdge and a view of its…",N,[[["eq"],["hash"],["clone"],["fnonce"],[R[37]]],[U]]],[11,R[85],E,"Returns a reference to the node for the given game state…",12,[[[T],["self"]],[[R[1],[R[79]]],[R[79]]]]],[11,"find_edge",E,"Returns a reference to an edge between the given nodes…",12,[[["self"],[R[79]]],[[R[80]],[R[1],[R[80]]]]]],[11,"append_node",E,"Adds a node for the given game state with the given data,…",12,[[["self"],["s"],[T]],[R[79]]]],[11,"into_node",E,"Consumes this view and returns a `MutNode`.",12,[[[R[79]]],[R[41]]]],[11,"into_append_node",E,"Consumes this view and adds a node as if `append_node` had…",12,[[["s"],[T]],[R[41]]]],[11,"into_edge",E,"Consumes this view and returns a `MutEdge`.",12,[[[R[80]]],[R[37]]]],[11,"append_edge",E,"Adds an edge between the given nodes, returning a…",12,[[["self"],[R[79]],["a"]],[R[80]]]],[11,"into_append_edge",E,"Consumes this view and adds an edge as if `append_edge`…",12,[[["a"],[R[79]]],[R[37]]]],[11,"node_state",E,"Returns a reference to the game state that `node` is…",12,[[["self"],[R[79]]],[T]]],[11,"node_data",E,R[81],12,[[["self"],[R[79]]],["s"]]],[11,"node_data_mut",E,R[82],12,[[["self"],[R[79]]],["s"]]],[11,"edge_data",E,R[81],12,[[[R[80]],["self"]],["a"]]],[11,"edge_data_mut",E,R[82],12,[[["self"],[R[80]]],["a"]]],[11,"edge_source",E,"Returns a reference to the node that `edge` originates from.",12,[[[R[80]],["self"]],[R[79]]]],[11,"edge_target",E,"Returns a reference to the node that `edge` terminates on.",12,[[[R[80]],["self"]],[R[79]]]],[11,R[83],E,"Returns the number of children (outgoing edges) that…",12,[[["self"],[R[79]]],["usize"]]],[11,"children",E,"Returns an iterator over the children (outgoing edges)…",12,[[[R[79]],["self"]]]],[11,R[84],E,"Returns the number of parents (incoming edges) that `node`…",12,[[["self"],[R[79]]],["usize"]]],[11,"parents",E,"Returns an iterator over the parents (incoming edges) that…",12,[[[R[79]],["self"]]]],[11,"retain_reachable_from",E,"Deletes all graph components that are not reachable by a…",12,[[["intoiterator"]]]],[11,"new",R[50],"Creates an empty `Graph` with no vertices or edges.",13,[[],["self"]]],[11,R[85],E,"Gets a node handle for the given game state.",13,[[[T],["self"]],[[R[1],["node"]],["node"]]]],[11,"find_node_mut",E,"Gets a mutable node handle for the given game state.",13,[[[T],["self"]],[[R[1],[R[41]]],[R[41]]]]],[11,"add_node",E,"Adds a vertex (with no parents or children) for the given…",13,[[["s"],[T],["self"]],[R[41]]]],[11,"add_edge",E,"Adds an edge from the vertex with state data `source` to…",13,[[["g"],["a"],["self"],["f"],[T]],[R[37]]]],[11,"vertex_count",E,"Returns the number of vertices in the graph.",13,[[["self"]],["usize"]]],[11,"edge_count",E,"Returns the number of edges in the graph.",13,[[["self"]],["usize"]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[8],E,E,13,[[[U]],[R[0]]]],[11,R[9],E,E,13,[[],[R[0]]]],[11,R[10],E,E,13,[[["self"]],[T]]],[11,R[12],E,E,13,[[["self"]],[T]]],[11,R[11],E,E,13,[[["self"]],[R[13]]]],[11,"from",R[86],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[8],E,E,0,[[[U]],[R[0]]]],[11,R[9],E,E,0,[[],[R[0]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[13]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[8],E,E,1,[[[U]],[R[0]]]],[11,R[9],E,E,1,[[],[R[0]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[13]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[8],E,E,2,[[[U]],[R[0]]]],[11,R[9],E,E,2,[[],[R[0]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[12],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[13]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[8],E,E,3,[[[U]],[R[0]]]],[11,R[9],E,E,3,[[],[R[0]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[12],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[13]]]],[11,"from",R[87],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[15],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,[[[T],["self"]]]],[11,R[8],E,E,4,[[[U]],[R[0]]]],[11,R[9],E,E,4,[[],[R[0]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[12],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[13]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[15],E,E,5,[[["self"]],[T]]],[11,R[16],E,E,5,[[[T],["self"]]]],[11,R[8],E,E,5,[[[U]],[R[0]]]],[11,R[9],E,E,5,[[],[R[0]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[12],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[13]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[7],E,E,14,[[],["i"]]],[11,R[8],E,E,14,[[[U]],[R[0]]]],[11,R[9],E,E,14,[[],[R[0]]]],[11,R[10],E,E,14,[[["self"]],[T]]],[11,R[12],E,E,14,[[["self"]],[T]]],[11,R[11],E,E,14,[[["self"]],[R[13]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[15],E,E,6,[[["self"]],[T]]],[11,R[16],E,E,6,[[[T],["self"]]]],[11,R[8],E,E,6,[[[U]],[R[0]]]],[11,R[9],E,E,6,[[],[R[0]]]],[11,R[10],E,E,6,[[["self"]],[T]]],[11,R[12],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[["self"]],[R[13]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[],[U]]],[11,R[7],E,E,15,[[],["i"]]],[11,R[8],E,E,15,[[[U]],[R[0]]]],[11,R[9],E,E,15,[[],[R[0]]]],[11,R[10],E,E,15,[[["self"]],[T]]],[11,R[12],E,E,15,[[["self"]],[T]]],[11,R[11],E,E,15,[[["self"]],[R[13]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[15],E,E,7,[[["self"]],[T]]],[11,R[16],E,E,7,[[[T],["self"]]]],[11,R[8],E,E,7,[[[U]],[R[0]]]],[11,R[9],E,E,7,[[],[R[0]]]],[11,R[10],E,E,7,[[["self"]],[T]]],[11,R[12],E,E,7,[[["self"]],[T]]],[11,R[11],E,E,7,[[["self"]],[R[13]]]],[11,"from",R[74],E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[8],E,E,11,[[[U]],[R[0]]]],[11,R[9],E,E,11,[[],[R[0]]]],[11,R[10],E,E,11,[[["self"]],[T]]],[11,R[12],E,E,11,[[["self"]],[T]]],[11,R[11],E,E,11,[[["self"]],[R[13]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,R[7],E,E,16,[[],["i"]]],[11,R[8],E,E,16,[[[U]],[R[0]]]],[11,R[9],E,E,16,[[],[R[0]]]],[11,R[10],E,E,16,[[["self"]],[T]]],[11,R[12],E,E,16,[[["self"]],[T]]],[11,R[11],E,E,16,[[["self"]],[R[13]]]],[11,"to_string",E,E,8,[[["self"]],["string"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[8],E,E,8,[[[U]],[R[0]]]],[11,R[9],E,E,8,[[],[R[0]]]],[11,R[10],E,E,8,[[["self"]],[T]]],[11,R[12],E,E,8,[[["self"]],[T]]],[11,R[11],E,E,8,[[["self"]],[R[13]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[8],E,E,9,[[[U]],[R[0]]]],[11,R[9],E,E,9,[[],[R[0]]]],[11,R[10],E,E,9,[[["self"]],[T]]],[11,R[12],E,E,9,[[["self"]],[T]]],[11,R[11],E,E,9,[[["self"]],[R[13]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[8],E,E,10,[[[U]],[R[0]]]],[11,R[9],E,E,10,[[],[R[0]]]],[11,R[10],E,E,10,[[["self"]],[T]]],[11,R[12],E,E,10,[[["self"]],[T]]],[11,R[11],E,E,10,[[["self"]],[R[13]]]],[11,"from",R[88],E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[8],E,E,12,[[[U]],[R[0]]]],[11,R[9],E,E,12,[[],[R[0]]]],[11,R[10],E,E,12,[[["self"]],[T]]],[11,R[12],E,E,12,[[["self"]],[T]]],[11,R[11],E,E,12,[[["self"]],[R[13]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,R[15],E,E,17,[[["self"]],[T]]],[11,R[16],E,E,17,[[[T],["self"]]]],[11,R[8],E,E,17,[[[U]],[R[0]]]],[11,R[9],E,E,17,[[],[R[0]]]],[11,R[10],E,E,17,[[["self"]],[T]]],[11,R[12],E,E,17,[[["self"]],[T]]],[11,R[11],E,E,17,[[["self"]],[R[13]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[],[U]]],[11,R[15],E,E,18,[[["self"]],[T]]],[11,R[16],E,E,18,[[[T],["self"]]]],[11,R[8],E,E,18,[[[U]],[R[0]]]],[11,R[9],E,E,18,[[],[R[0]]]],[11,R[10],E,E,18,[[["self"]],[T]]],[11,R[12],E,E,18,[[["self"]],[T]]],[11,R[11],E,E,18,[[["self"]],[R[13]]]],[11,"next",R[87],E,14,[[["self"]],[[R[1],["edge"]],["edge"]]]],[11,R[21],E,E,14,[[["self"]]]],[11,"next",E,E,15,[[["self"]],[[R[1],["edge"]],["edge"]]]],[11,R[21],E,E,15,[[["self"]]]],[11,"next",R[74],E,16,[[["self"]],[[R[78]],[R[1],[R[78]]]]]],[11,R[21],E,E,16,[[["self"]]]],[11,"clone",R[87],E,4,[[["self"]],["node"]]],[11,"clone",E,E,5,[[["self"]],[R[59]]]],[11,"clone",E,E,6,[[["self"]],[R[61]]]],[11,"clone",E,E,7,[[["self"]],["edge"]]],[11,"clone",R[88],E,17,[[["self"]],[R[79]]]],[11,"clone",E,E,18,[[["self"]],[R[80]]]],[11,"eq",E,E,17,[[["self"]],["bool"]]],[11,"eq",E,E,18,[[["self"]],["bool"]]],[11,"deref_mut",E,E,12,[[["self"]],["graph"]]],[11,"fmt",R[74],E,8,[[["self"],[R[24]]],[R[0]]]],[11,"fmt",R[88],E,17,[[["self"],[R[24]]],[R[0]]]],[11,"fmt",E,E,18,[[["self"],[R[24]]],[R[0]]]],[11,"fmt",R[74],E,8,[[["self"],[R[24]]],[R[0]]]],[11,"deref",R[88],E,12,[[["self"]],["graph"]]],[11,"index",E,E,12,[[["self"],[R[79]]],["s"]]],[11,"index",E,E,12,[[[R[80]],["self"]],["a"]]],[11,R[89],E,E,12,[[["self"],[R[79]]],["s"]]],[11,R[89],E,E,12,[[["self"],[R[80]]],["a"]]],[11,"description",R[74],E,8,[[["self"]],["str"]]],[11,"cause",E,E,8,[[["self"]],[["error"],[R[1],["error"]]]]]],"p":[[3,"MutNode"],[3,R[90]],[3,R[91]],[3,"MutEdge"],[3,"Node"],[3,R[92]],[3,R[93]],[3,"Edge"],[4,R[94]],[4,R[95]],[4,R[96]],[3,"Stack"],[3,"View"],[3,"Graph"],[3,R[97]],[3,R[98]],[3,R[99]],[3,"NodeRef"],[3,"EdgeRef"]]};
searchIndex["symbol_map"]={"doc":"Provides fast mapping of arbitrary values to symbolic…","i":[[3,"Symbol",R[6],"A table entry that associates an instance of `T` with an…",N,N],[3,"Table",E,"The head of a linked list associating `T`s with…",N,N],[3,R[28],E,"Iterator that consumes a table.",N,N],[3,R[29],E,"Iterator over table contents.",N,N],[0,"indexing",E,"Indexing on top of a `Table`.",N,N],[3,"Ref",R[14],"Wrapper for a raw pointer which lets us treat it like a…",N,N],[3,R[30],E,"HashMap-backed table indexing.",N,N],[4,R[25],E,"Indicates whether the result of a symbol lookup had to…",N,N],[13,"Present",E,"Result came from an item that was already present in table.",0,N],[13,"New",E,"Result came from an item that was not present in table,…",0,N],[8,R[26],E,"Provides indexing for a `Table`, so that its elements may…",N,N],[16,"Data",E,"The type `T` of a `Table<T, D>`.",1,N],[16,"Id",E,"The type `D` of a `Table<T, D>`.",1,N],[10,R[17],E,"Returns a new indexing method that has already indexed the…",1,[[[R[3]]],["self"]]],[10,R[3],E,"Returns a read-only view of the underlying table.",1,[[["self"]],[R[3]]]],[10,R[18],E,"Extracts the underlying table from the index, discarding…",1,[[],[R[3]]]],[10,"get",E,"Looks up `data` in the index. Returns `Some(&symbol)` if a…",1,[[["self"]],[[R[1],[R[4]]],[R[4]]]]],[10,R[19],E,"Looks up `data` in the index, inserting it into the index…",1,[[["self"]],[[R[5],[R[4]]],[R[4]]]]],[10,R[20],E,"Looks up the symbol with id `i` in the index. Returns…",1,[[["self"]],[[R[4]],[R[1],[R[4]]]]]],[11,"map",E,"Maps over the type returned by an `Insertion` to produce a…",0,[[["self"],["f"]],[R[5]]]],[11,"unwrap",E,"Unwraps an `Insertion` to produce the value which it wraps.",0,[[],[T]]],[11,"id",R[6],"Returns the symbol's ID.",2,[[["self"]],["d"]]],[11,"data",E,"Returns a reference to the symbol's data.",2,[[["self"]],[T]]],[11,"new",E,"Creates a new, empty table.",3,[[],["self"]]],[11,"len",E,"Returns the number of symbols in the table.",3,[[["self"]],["usize"]]],[11,"insert",E,"Inserts `value` into the table and assigns it an id. The…",3,[[["self"],[T]],[R[4]]]],[11,"remap",E,"Remaps associations between `T`s and `D`s, selectively…",3,[[["self"],["f"]]]],[11,R[7],E,E,3,[[],["tableintoiter"]]],[11,"iter",E,"Returns an iterator over table entries.",3,[[["self"]],["tableiter"]]],[11,"to_hash_map",E,"Converts `self` to a `HashMap` holding the same…",3,[[],["hashmap"]]],[8,R[27],E,"An atomic ID.",N,N],[10,"next",E,"Returns the ID immediately subsequent to this one.",4,[[["self"]],["self"]]],[10,"as_usize",E,"Casts the ID to a `usize`.",4,[[["self"]],["usize"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[8],E,E,2,[[[U]],[R[0]]]],[11,R[9],E,E,2,[[],[R[0]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[12],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[13]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[7],E,E,3,[[],["i"]]],[11,R[8],E,E,3,[[[U]],[R[0]]]],[11,R[9],E,E,3,[[],[R[0]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[12],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[13]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[7],E,E,5,[[],["i"]]],[11,R[8],E,E,5,[[[U]],[R[0]]]],[11,R[9],E,E,5,[[],[R[0]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[12],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[13]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[7],E,E,6,[[],["i"]]],[11,R[8],E,E,6,[[[U]],[R[0]]]],[11,R[9],E,E,6,[[],[R[0]]]],[11,R[10],E,E,6,[[["self"]],[T]]],[11,R[12],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[["self"]],[R[13]]]],[11,"from",R[14],E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[15],E,E,7,[[["self"]],[T]]],[11,R[16],E,E,7,[[[T],["self"]]]],[11,R[8],E,E,7,[[[U]],[R[0]]]],[11,R[9],E,E,7,[[],[R[0]]]],[11,R[10],E,E,7,[[["self"]],[T]]],[11,R[12],E,E,7,[[["self"]],[T]]],[11,R[11],E,E,7,[[["self"]],[R[13]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[8],E,E,8,[[[U]],[R[0]]]],[11,R[9],E,E,8,[[],[R[0]]]],[11,R[10],E,E,8,[[["self"]],[T]]],[11,R[12],E,E,8,[[["self"]],[T]]],[11,R[11],E,E,8,[[["self"]],[R[13]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[15],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[[T],["self"]]]],[11,R[8],E,E,0,[[[U]],[R[0]]]],[11,R[9],E,E,0,[[],[R[0]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[13]]]],[11,R[17],E,E,8,[[[R[3]]],["self"]]],[11,R[3],E,E,8,[[["self"]],[R[3]]]],[11,R[18],E,E,8,[[],[R[3]]]],[11,"get",E,E,8,[[[T],["self"]],[[R[4]],[R[1],[R[4]]]]]],[11,R[19],E,E,8,[[[T],["self"]],[[R[4]],[R[5],[R[4]]]]]],[11,R[20],E,E,8,[[["d"],["self"]],[[R[4]],[R[1],[R[4]]]]]],[11,"default",E,E,8,[[],["self"]]],[11,"next",R[6],E,6,[[["self"]],[[R[1],[R[4]]],[R[4]]]]],[11,R[21],E,E,6,[[["self"]]]],[11,"next",E,E,5,[[["self"]],[[R[1],["box"]],["box",[R[4]]]]]],[11,R[21],E,E,5,[[["self"]]]],[11,"clone",R[14],E,0,[[["self"]],[R[5]]]],[11,"clone",E,E,7,[[["self"]],["self"]]],[11,"cmp",E,E,0,[[["self"],[R[5]]],[R[22]]]],[11,"cmp",E,E,7,[[["self"]],[R[22]]]],[11,"cmp",R[6],E,2,[[["self"]],[R[22]]]],[11,R[7],E,E,3,[[]]],[11,R[23],R[14],E,0,[[["self"],[R[5]]],[[R[1],[R[22]]],[R[22]]]]],[11,"lt",E,E,0,[[["self"],[R[5]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[5]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[5]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[5]]],["bool"]]],[11,R[23],E,E,7,[[["self"]],[[R[1],[R[22]]],[R[22]]]]],[11,R[23],R[6],E,2,[[["self"]],[[R[1],[R[22]]],[R[22]]]]],[11,"eq",R[14],E,0,[[["self"],[R[5]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[5]]],["bool"]]],[11,"eq",E,E,7,[[["self"]],["bool"]]],[11,"eq",R[6],E,2,[[["self"]],["bool"]]],[11,"fmt",R[14],E,7,[[["self"],[R[24]]],[R[0]]]],[11,"fmt",E,E,8,[[["self"],[R[24]]],[R[0]]]],[11,"fmt",R[6],E,2,[[["self"],[R[24]]],[R[0]]]],[11,"fmt",E,E,3,[[["self"],[R[24]]],[R[0]]]],[11,"fmt",E,E,6,[[["self"],[R[24]]],[R[0]]]],[11,"fmt",E,E,5,[[["self"],[R[24]]],[R[0]]]],[11,"hash",R[14],E,0,[[["self"],["__ht"]]]],[11,"hash",E,E,7,[[["self"],["h"]]]],[11,"hash",R[6],E,2,[[["self"],["h"]]]],[11,"fmt",R[14],E,7,[[["self"],[R[24]]],[R[0]]]]],"p":[[4,R[25]],[8,R[26]],[3,"Symbol"],[3,"Table"],[8,R[27]],[3,R[28]],[3,R[29]],[3,"Ref"],[3,R[30]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);