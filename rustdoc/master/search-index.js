var searchIndex = {};
searchIndex["search_graph"] = {"doc":"","items":[[3,"Graph","search_graph","A search graph.",null,null],[4,"Target","","The target of an outgoing graph edge.",null,null],[13,"Unexpanded","","Edge has not yet been expanded. Associated data may be used to perform\nexpansion.",0,null],[13,"Expanded","","Edge has been expanded. Associated data indicates the target vertex. The\ntarget will have a backpointer to this edge&#39;s source in its parent list.",0,null],[0,"mutators","","Support for navigation of a graph that allows modifications to graph\ntopology and full read-write access to graph data.",null,null],[3,"EdgeExpander","search_graph::mutators","Modifies graph topology by connecting an unexpanded edge to its target\nvertex.",null,null],[3,"MutChildList","","A traversible list of a vertex&#39;s outgoing edges.",null,null],[3,"MutEdge","","Mutable handle to a graph edge (&quot;edge handle&quot;) when edge expansion state is\nunknown.",null,null],[3,"MutExpandedEdge","","Mutable handle to a graph edge (&quot;edge handle&quot;) when edge expansion state is\nknown.",null,null],[3,"MutNode","","Mutable handle to a graph vertex (&quot;node handle&quot;).",null,null],[3,"MutParentList","","A traversible list of a vertex&#39;s incoming edges.",null,null],[4,"Expanded","","The result of edge expansion. This wraps the resulting handle to the graph\ncomponent, with each variant indicating whether the expansion created a new\nvertex or connected an edge to an existing one.",null,null],[13,"New","","Edge expansion created a new vertex.",1,null],[13,"Extant","","Edge expansion connected to an existing vertex.",1,null],[0,"nav","search_graph","Support for navigation of a graph without allowing modifications to graph\ntopology.",null,null],[3,"ChildList","search_graph::nav","A traversible list of a vertex&#39;s outgoing edges.",null,null],[3,"ChildListIter","","Iterator over a vertex&#39;s child edges.",null,null],[3,"Edge","","Immutable handle to a graph edge (&quot;edge handle&quot;).",null,null],[3,"Node","","Immutable handle to a graph vertex (&quot;node handle&quot;).",null,null],[3,"ParentList","","A traversible list of a vertex&#39;s incoming edges.",null,null],[3,"ParentListIter","","Iterator over a vertex&#39;s parent edges.",null,null],[0,"search","search_graph","Data structures and algorithms for local graph search.",null,null],[3,"Stack","search_graph::search","Tracks the path through a graph that is followed when performing local search.",null,null],[3,"StackIter","","Iterates over elements of a search path, in the order in which they were\ntraversed, ending with the head.",null,null],[4,"SearchError","","Errors that may arise during search.",null,null],[13,"Unexpanded","","A traversal operation could not be performed because the path head is\nunexpanded.",2,null],[13,"ChildBounds","","A search operation selected a child index that was out of bounds.",2,null],[12,"requested_index","search_graph::search::SearchError","The index of the child that was requested.",2,null],[12,"child_count","","The actual number of chidren (which `requested_index` exceeds).",2,null],[13,"ParentBounds","search_graph::search","A search operation selected a parent index that was out of bounds.",2,null],[12,"requested_index","search_graph::search::SearchError","The index of the parent that was requested.",2,null],[12,"parent_count","","The actual number of parents (which `requested_index` exceeds).",2,null],[13,"SelectionError","search_graph::search","A search operation encountered an error.",2,null],[4,"StackItem","","Sum type for path elements. All elements except the head are represented\nwith the `StackItem::Item` variant.",null,null],[13,"Item","","Non-head item, a (vertex, edge) pair.",3,null],[13,"Head","","The path head, which may resolve to a vertex or an unexpanded edge.",3,null],[4,"Traversal","","Indicates which edge of a vertex to traverse. Edges are denoted by a 0-based\nindex. This type is used by functions provided during graph search to\nindicate which child or parent edges to traverse.",null,null],[13,"Child","","Traverse the given child.",4,null],[13,"Parent","","Traverse the given parent.",4,null],[11,"new","search_graph","Creates an empty `Graph` with no vertices or edges.",5,{"inputs":[],"output":{"name":"self"}}],[11,"get_node","","Gets a node handle for the given game state.",5,{"inputs":[{"name":"graph"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_node_mut","","Gets a mutable node handle for the given game state.",5,{"inputs":[{"name":"graph"},{"name":"t"}],"output":{"name":"option"}}],[11,"add_root","","Adds a root vertex (one with no parents) for the given game state and\ndata and returns a mutable handle for it.",5,{"inputs":[{"name":"graph"},{"name":"t"},{"name":"s"}],"output":{"name":"mutnode"}}],[11,"add_edge","","Adds an edge from the vertex with state data `source` to the vertex with\nstate data `dest`. If vertices are not found for `source` or `dest`,\nthey are added, with the data provided by `source_data` and `dest_data`\ncallbacks.",5,{"inputs":[{"name":"graph"},{"name":"t"},{"name":"f"},{"name":"t"},{"name":"g"},{"name":"a"}],"output":{"name":"mutedge"}}],[11,"vertex_count","","Returns the number of vertices in the graph.",5,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[11,"edge_count","","Returns the number of edges in the graph.",5,{"inputs":[{"name":"graph"}],"output":{"name":"usize"}}],[11,"retain_reachable_from","","Deletes all graph components that are not reachable by traversal\nstarting from each vertex corresponding to the game states in `roots`.",5,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"target"},{"name":"target"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"target"},{"name":"target"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"target"},{"name":"target"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"target"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"target"},{"name":"target"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"target"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"target"},{"name":"target"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"target"},{"name":"target"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"target"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"target"}],"output":{"name":"target"}}],[11,"get_id","search_graph::nav","Returns an immutable ID that is guaranteed to identify this vertex\nuniquely within its graph. This ID may change when the graph is mutated.",6,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"get_data","","Returns the data at this vertex.",6,{"inputs":[{"name":"node"}],"output":{"name":"s"}}],[11,"is_leaf","","Returns true iff this vertex has no outgoing edges (regardless of\nwhether they are expanded).",6,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_root","","Returns true iff this vertex has no incoming edges.",6,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"get_child_list","","Returns a traversible list of outgoing edges.",6,{"inputs":[{"name":"node"}],"output":{"name":"childlist"}}],[11,"get_parent_list","","Returns a traversible list of incoming edges.",6,{"inputs":[{"name":"node"}],"output":{"name":"parentlist"}}],[11,"len","","Returns the number of edges.",7,{"inputs":[{"name":"childlist"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true iff there are no outgoing edges.",7,{"inputs":[{"name":"childlist"}],"output":{"name":"bool"}}],[11,"get_source_node","","Returns a node handle for the vertex these edges originate from.",7,{"inputs":[{"name":"childlist"}],"output":{"name":"node"}}],[11,"get_edge","","Returns an edge handle for the `i`th edge.",7,{"inputs":[{"name":"childlist"},{"name":"usize"}],"output":{"name":"edge"}}],[11,"iter","","Returns an iterator over child edges.",7,{"inputs":[{"name":"childlist"}],"output":{"name":"childlistiter"}}],[11,"next","","",8,{"inputs":[{"name":"childlistiter"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"len","","Returns the number of edges.",9,{"inputs":[{"name":"parentlist"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true iff there are no incoming edges.",9,{"inputs":[{"name":"parentlist"}],"output":{"name":"bool"}}],[11,"target_node","","Returns a node handle for the vertex these edges point to.",9,{"inputs":[{"name":"parentlist"}],"output":{"name":"node"}}],[11,"get_edge","","Returns an edge handle for the `i`th edge.",9,{"inputs":[{"name":"parentlist"},{"name":"usize"}],"output":{"name":"edge"}}],[11,"iter","","Returns an iterator over parent edges.",9,{"inputs":[{"name":"parentlist"}],"output":{"name":"parentlistiter"}}],[11,"next","","",10,{"inputs":[{"name":"parentlistiter"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"get_id","","Returns an immutable ID that is guaranteed to identify this edge\nuniquely within its graph.  This ID may change when the graph is\nmutated.",11,{"inputs":[{"name":"edge"}],"output":{"name":"usize"}}],[11,"get_data","","Returns the data at this edge.",11,{"inputs":[{"name":"edge"}],"output":{"name":"a"}}],[11,"get_source","","Returns a node handle for this edge&#39;s source vertex.",11,{"inputs":[{"name":"edge"}],"output":{"name":"node"}}],[11,"get_target","","Returns the target of this edge. If the edge is unexpanded, no data will\nbe available. If it is expanded, a node handle will be available.",11,{"inputs":[{"name":"edge"}],"output":{"name":"target"}}],[11,"fmt","search_graph::search","",2,{"inputs":[{"name":"searcherror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"searcherror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"searcherror"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"searcherror"}],"output":{"name":"option"}}],[11,"new","","Creates a new `Stack` from a mutable reference into a graph.",12,{"inputs":[{"name":"mutnode"}],"output":{"name":"self"}}],[11,"len","","Returns the number of elements in the path. Since a path always has a\nhead, there is always at least 1 element.",12,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"pop","","Removes the most recently traversed element from the path, if\nany. Returns a handle for any edge that was removed.",12,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"head","","Returns a read-only view of the head element.",12,{"inputs":[{"name":"stack"}],"output":{"name":"target"}}],[11,"is_head_expanded","","Returns `true` iff the head element is expanded (i.e., resolves to a\nvertex).",12,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"to_head","","Consumes the path and returns a mutable view of its head.",12,{"inputs":[{"name":"stack"}],"output":{"name":"target"}}],[11,"push","","Grows the path by consulting a function of the current head. If this\nfunction `f` returns `Ok(Some(Traversal::Child(i)))`, then the `i`th\nchild of the current head is pushed onto the path. If it returns\n`Ok(Some(Traversal::Parent(i)))`, then the `i`th parent of the current\nhead is pushed onto the path.",12,{"inputs":[{"name":"stack"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over path elements. Iteration is in order of\ntraversal (i.e., the last element of the iteration is the path head).",12,{"inputs":[{"name":"stack"}],"output":{"name":"stackiter"}}],[11,"item","","Returns the `i`th item of the path. Path items are indexed in order of\ntraversal (i.e., the last element is the path head).",12,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"stackiter"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"get_id","search_graph::mutators","Returns an immutable ID that is guaranteed to identify this vertex\nuniquely within its graph. This ID may change when the graph is mutated.",14,{"inputs":[{"name":"mutnode"}],"output":{"name":"usize"}}],[11,"get_data","","Returns the data at this vertex.",14,{"inputs":[{"name":"mutnode"}],"output":{"name":"s"}}],[11,"get_data_mut","","Returns the data at this vertex, mutably.",14,{"inputs":[{"name":"mutnode"}],"output":{"name":"s"}}],[11,"is_leaf","","Returns true iff this vertex has no outgoing edges (regardless of\nwhether they are expanded).",14,{"inputs":[{"name":"mutnode"}],"output":{"name":"bool"}}],[11,"is_root","","Returns true iff this vertex has no incoming edges.",14,{"inputs":[{"name":"mutnode"}],"output":{"name":"bool"}}],[11,"get_child_list","","Returns a traversible list of outgoing edges. Its lifetime will be\nlimited to a local borrow of `self`.",14,{"inputs":[{"name":"mutnode"}],"output":{"name":"childlist"}}],[11,"get_child_list_mut","","Returns a traversible list of outgoing edges. Its lifetime will be\nlimited to a local borrow of `self`.",14,{"inputs":[{"name":"mutnode"}],"output":{"name":"mutchildlist"}}],[11,"to_child_list","","Returns a traversible list of outgoing edges. `self` is consumed, and\nthe return value&#39;s lifetime will be the same as that of `self`.",14,{"inputs":[{"name":"mutnode"}],"output":{"name":"mutchildlist"}}],[11,"get_parent_list","","Returns a traversible list of incoming edges. Its lifetime will be\nlimited to a local borrow of `self`.",14,{"inputs":[{"name":"mutnode"}],"output":{"name":"parentlist"}}],[11,"get_parent_list_mut","","Returns a traversible list of incoming edges. Its lifetime will be\nlimited to a local borrow of `self`.",14,{"inputs":[{"name":"mutnode"}],"output":{"name":"mutparentlist"}}],[11,"to_parent_list","","Returns a traversible list of outgoing edges. `self` is consumed, and\nthe return value&#39;s lifetime will be the same as that of `self`.",14,{"inputs":[{"name":"mutnode"}],"output":{"name":"mutparentlist"}}],[11,"to_node","","Returns a non-mutating node obtained by converting this node. `self` is\nconsumed, and the return value&#39;s lifetime will be the same as that of\n`self`. The source graph is still considered to have a mutable borrow in\nplay, but the resulting node can be cloned freely.",14,{"inputs":[{"name":"mutnode"}],"output":{"name":"node"}}],[11,"retain_reachable","","Prunes the underlying graph by removing components not reachable from\nthis node.",14,{"inputs":[{"name":"mutnode"}],"output":null}],[11,"len","","Returns the number of outgoing eges.",15,{"inputs":[{"name":"mutchildlist"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true iff there are no outgoing edges.",15,{"inputs":[{"name":"mutchildlist"}],"output":{"name":"bool"}}],[11,"get_edge","","Returns an edge handle for the `i`th edge.",15,{"inputs":[{"name":"mutchildlist"},{"name":"usize"}],"output":{"name":"edge"}}],[11,"get_edge_mut","","Returns an edge handle for the `i`th edge. Its lifetime will be limited\nto a local borrow of `self`.",15,{"inputs":[{"name":"mutchildlist"},{"name":"usize"}],"output":{"name":"mutedge"}}],[11,"to_edge","","Returns an edge handle for the `i`th `self` is consumed, and the return\nvalue&#39;s lifetime will be the same as that of `self`.",15,{"inputs":[{"name":"mutchildlist"},{"name":"usize"}],"output":{"name":"mutedge"}}],[11,"get_source_node","","Returns a node handle for the vertex these edges originate from. Its\nlifetime will be limited to a local borrow of `self`.",15,{"inputs":[{"name":"mutchildlist"}],"output":{"name":"node"}}],[11,"get_source_node_mut","","Returns a mutable node handle for the vertex these edges originate\nfrom. Its lifetime will be limited to a local borrow of `self`.",15,{"inputs":[{"name":"mutchildlist"}],"output":{"name":"mutnode"}}],[11,"to_source_node","","Returns a mutable node handle for the vertex these edges originate\nfrom. `self` is consumed, and the return value&#39;s lifetime will be the\nsame as that of `self`.",15,{"inputs":[{"name":"mutchildlist"}],"output":{"name":"mutnode"}}],[11,"iter","","Returns an iterator over child edges.",15,{"inputs":[{"name":"mutchildlist"}],"output":{"name":"childlistiter"}}],[11,"add_child","","Appends an unexpanded edge to this list of children and returns a mutable handle to\nit. Its lifetime will be limited to a local borrow of `self`.",15,{"inputs":[{"name":"mutchildlist"},{"name":"a"}],"output":{"name":"mutedge"}}],[11,"to_add","","Appends unexpanded an edge to the vertex&#39;s&#39; children and returns a\nmutable handle to it. `self` will be consumed, and the return value&#39;s\nlifetime will be equal to that of `self`.",15,{"inputs":[{"name":"mutchildlist"},{"name":"a"}],"output":{"name":"mutedge"}}],[11,"len","","Returns the number of incoming edges.",16,{"inputs":[{"name":"mutparentlist"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true iff there are no incoming edges.",16,{"inputs":[{"name":"mutparentlist"}],"output":{"name":"bool"}}],[11,"get_target_node","","Returns a node handle for the vertex these edges originate terminate\non. Its lifetime will be limited to a local borrow of `self`.",16,{"inputs":[{"name":"mutparentlist"}],"output":{"name":"node"}}],[11,"get_target_node_mut","","Returns a mutable node handle for the vertex these edges terminate\non. Its lifetime will be limited to a local borrow of `self`.",16,{"inputs":[{"name":"mutparentlist"}],"output":{"name":"mutnode"}}],[11,"to_target_node","","Returns a mutable node handle for the vertex these edges terminate\non. `self` is consumed, and the return value&#39;s lifetime will be the same\nas that of `self`.",16,{"inputs":[{"name":"mutparentlist"}],"output":{"name":"mutnode"}}],[11,"get_edge","","Returns a handle to the `i`th edge. Its lifetime will be limited to a\nlocal borrow of `self`.",16,{"inputs":[{"name":"mutparentlist"},{"name":"usize"}],"output":{"name":"edge"}}],[11,"get_edge_mut","","Returns a mutable handle to the `i`th edge. Its lifetime will be limited\nto a local borrow of `self`.",16,{"inputs":[{"name":"mutparentlist"},{"name":"usize"}],"output":{"name":"mutedge"}}],[11,"to_edge","","Returns a mutable handle to the `i`th edge. `self` is consumed, and the\nreturn value&#39;s lifetime will be the same as that of `self`.",16,{"inputs":[{"name":"mutparentlist"},{"name":"usize"}],"output":{"name":"mutedge"}}],[11,"iter","","Returns an iterator over parent edges.",16,{"inputs":[{"name":"mutparentlist"}],"output":{"name":"parentlistiter"}}],[11,"get_id","","Returns an immutable ID that is guaranteed to identify this vertex\nuniquely within its graph. This ID may change when the graph is mutated.",17,{"inputs":[{"name":"mutedge"}],"output":{"name":"usize"}}],[11,"get_data","","Returns the data at this edge.",17,{"inputs":[{"name":"mutedge"}],"output":{"name":"a"}}],[11,"get_data_mut","","Returns the data at this edge, mutably.",17,{"inputs":[{"name":"mutedge"}],"output":{"name":"a"}}],[11,"get_target","","Returns the target of this edge. If the edge is unexpanded, no data will\nbe available. If it is expanded, a node handle will be available, with\nits lifetime limited to a local borrow of `self`.",17,{"inputs":[{"name":"mutedge"}],"output":{"name":"target"}}],[11,"get_target_mut","","Returns the target of this edge. If the edge is unexpanded, an\n`EdgeExpander` will be provided. If it is expanded, a mutable node\nhandle will be available. In both cases, lifetimes will be limited to a\nlocal borrow of `self`.",17,{"inputs":[{"name":"mutedge"}],"output":{"name":"target"}}],[11,"to_target","","Returns the target of this edge. If the edge is unexpanded, an\n`EdgeExpander` will be provided. If it is expanded, a mutable node\nhandle will be available. In both cases `self` is consumed, and the\nreturn value&#39;s lifetime will be the same as that of `self`.",17,{"inputs":[{"name":"mutedge"}],"output":{"name":"target"}}],[11,"get_source","","Returns a node handle for the source of this edge. Its lifetime will be\nlimited to a local borrow of `self`.",17,{"inputs":[{"name":"mutedge"}],"output":{"name":"node"}}],[11,"get_source_mut","","Returns a mutable node handle for the source of this edge. Its lifetime\nwill be limited to a local borrow of `self`.",17,{"inputs":[{"name":"mutedge"}],"output":{"name":"mutnode"}}],[11,"to_source","","Returns a mutable node handle for the source of this edge. `self` is\nconsumed, and the return value&#39;s lifetime will be equal to that of\n`self`.",17,{"inputs":[{"name":"mutedge"}],"output":{"name":"mutnode"}}],[11,"to_edge","","Returns a non-mutating edge obtained by converting this edge. `self` is\nconsumed, and the return value&#39;s lifetime will be the same as that of\n`self`. The source graph is still considered to have a mutable borrow in\nplay, but the resulting edge can be cloned freely.",17,{"inputs":[{"name":"mutedge"}],"output":{"name":"edge"}}],[11,"get_edge","","Returns an edge handle for the edge that this expander would expand. Its\nlifetime will be limited to a local borrow of `self`.",18,{"inputs":[{"name":"edgeexpander"}],"output":{"name":"edge"}}],[11,"get_edge_mut","","Returns a mutable edge handle for the edge that this expander would\nexpand. Its lifetime will be limited to a local borrow of `self`.",18,{"inputs":[{"name":"edgeexpander"}],"output":{"name":"mutedge"}}],[11,"to_edge","","Returns a mutable edge handle for the edge that this expander would\nexpand. `self` is consumed, and the return value&#39;s lifetime will be the\nsame as that of `self`.",18,{"inputs":[{"name":"edgeexpander"}],"output":{"name":"mutedge"}}],[11,"expand_to_edge","","Expands this expander&#39;s edge, by connecting to the vertex associated\nwith the game state `state`.",18,{"inputs":[{"name":"edgeexpander"},{"name":"t"},{"name":"g"}],"output":{"name":"expanded"}}],[11,"expand_to_target","","Expands this expander&#39;s edge, by connecting to the vertex associated\nwith the game state `state`.",18,{"inputs":[{"name":"edgeexpander"},{"name":"t"},{"name":"g"}],"output":{"name":"expanded"}}],[11,"get_id","","Returns an immutable ID that is guaranteed to identify this vertex\nuniquely within its graph. This ID may change when the graph is mutated.",19,{"inputs":[{"name":"mutexpandededge"}],"output":{"name":"usize"}}],[11,"get_data","","Returns the data at this edge.",19,{"inputs":[{"name":"mutexpandededge"}],"output":{"name":"a"}}],[11,"get_data_mut","","Returns the data at this edge, mutably.",19,{"inputs":[{"name":"mutexpandededge"}],"output":{"name":"a"}}],[11,"get_target","","Returns the target of this edge. Its lifetime limited to a local borrow\nof `self`.",19,{"inputs":[{"name":"mutexpandededge"}],"output":{"name":"node"}}],[11,"get_target_mut","","Returns the target of this edge. Its lifetime will be limited to a local\nborrow of `self`.",19,{"inputs":[{"name":"mutexpandededge"}],"output":{"name":"mutnode"}}],[11,"to_target","","Returns the target of this edge. `self` is consumed, and the return\nvalue&#39;s lifetime will be the same as that of `self`.",19,{"inputs":[{"name":"mutexpandededge"}],"output":{"name":"mutnode"}}],[11,"get_source","","Returns a node handle for the source of this edge. Its lifetime will be\nlimited to a local borrow of `self`.",19,{"inputs":[{"name":"mutexpandededge"}],"output":{"name":"node"}}],[11,"get_source_mut","","Returns a mutable node handle for the source of this edge. Its lifetime\nwill be limited to a local borrow of `self`.",19,{"inputs":[{"name":"mutexpandededge"}],"output":{"name":"mutnode"}}],[11,"to_source","","Returns a mutable node handle for the source of this edge. `self` is\nconsumed, and the return value&#39;s lifetime will be equal to that of\n`self`.",19,{"inputs":[{"name":"mutexpandededge"}],"output":{"name":"mutnode"}}],[11,"to_edge","","Returns a non-mutating edge obtained by converting this edge. `self` is\nconsumed, and the return value&#39;s lifetime will be the same as that of\n`self`. The source graph is still considered to have a mutable borrow in\nplay, but the resulting edge can be cloned freely.",19,{"inputs":[{"name":"mutexpandededge"}],"output":{"name":"edge"}}]],"paths":[[4,"Target"],[4,"Expanded"],[4,"SearchError"],[4,"StackItem"],[4,"Traversal"],[3,"Graph"],[3,"Node"],[3,"ChildList"],[3,"ChildListIter"],[3,"ParentList"],[3,"ParentListIter"],[3,"Edge"],[3,"Stack"],[3,"StackIter"],[3,"MutNode"],[3,"MutChildList"],[3,"MutParentList"],[3,"MutEdge"],[3,"EdgeExpander"],[3,"MutExpandedEdge"]]};
initSearch(searchIndex);
